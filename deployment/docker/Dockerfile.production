# üöÄ DBX AI Aviation System - Production Dockerfile
# Multi-stage build for optimized production image

# ===============================================
# üèóÔ∏è BUILD STAGE
# ===============================================
FROM python:3.11-slim as builder

# Set build arguments
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION

# Add metadata labels
LABEL org.opencontainers.image.title="DBX AI Aviation System"
LABEL org.opencontainers.image.description="Production-ready multi-aircraft AI analysis system"
LABEL org.opencontainers.image.version=$VERSION
LABEL org.opencontainers.image.created=$BUILD_DATE
LABEL org.opencontainers.image.revision=$VCS_REF
LABEL org.opencontainers.image.vendor="DBX AI Team"
LABEL org.opencontainers.image.source="https://github.com/your-org/dbx-ai-aviation"

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    build-essential \
    gcc \
    g++ \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Set work directory
WORKDIR /build

# Copy requirements and install Python dependencies
COPY pyproject.toml requirements.txt ./
RUN pip install --no-cache-dir --upgrade pip setuptools wheel
RUN pip install --no-cache-dir -r requirements.txt

# ===============================================
# üè≠ PRODUCTION STAGE
# ===============================================
FROM python:3.11-slim as production

# Create non-root user for security
RUN groupadd -r dbxai && useradd -r -g dbxai -s /bin/false dbxai

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    libpq5 \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Set work directory
WORKDIR /app

# Copy Python packages from builder
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code
COPY src/ ./src/
COPY data/models/ ./data/models/
COPY main.py ./
COPY .env.example ./.env

# Create necessary directories
RUN mkdir -p /app/logs /app/data/uploads /app/data/cache \
    && chown -R dbxai:dbxai /app

# Switch to non-root user
USER dbxai

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose port
EXPOSE 8000

# Set environment variables
ENV PYTHONPATH=/app/src
ENV PYTHONUNBUFFERED=1
ENV ENVIRONMENT=production

# Start command
CMD ["python", "main.py"]