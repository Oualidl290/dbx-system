DBX AI - QUICK START GUIDE
==========================

WHAT WE BUILT:
- Multi-Aircraft AI-powered drone flight log analyzer
- Detects anomalies using specialized XGBoost models per aircraft type
- Generates aircraft-specific reports with SHAP explanations
- REST API with FastAPI + Redis + Docker + Gemini AI

WHAT HAPPENED DURING SETUP:
===========================

1. CREATED PROJECT STRUCTURE
   - Main folder: dbx_ai/
   - AI engine: ai-engine/app/
   - Data storage: data/
   - Docker configuration files

2. INSTALLED DEPENDENCIES
   - Python ML libraries (XGBoost, SHAP, scikit-learn)
   - FastAPI for REST API
   - Redis for caching
   - OpenAI for AI reports
   - Docker for containerization

3. BUILT ML MODEL SYSTEM
   - AnomalyDetector class with XGBoost
   - Automatically trains on synthetic flight data
   - 12 flight parameters (altitude, battery, motors, GPS, etc.)
   - Risk scoring: LOW (0-0.3), MEDIUM (0.3-0.7), HIGH (0.7-1.0)

4. CREATED DATA PROCESSING
   - LogParser: handles CSV, MAVLink (.bin), ULog files
   - ReportGenerator: creates comprehensive analysis reports
   - SHAP explainer: provides interpretable AI insights

5. BUILT REST API
   - FastAPI application with multiple endpoints
   - File upload and analysis capabilities
   - JSON responses with anomaly detection results

6. CONTAINERIZED WITH DOCKER
   - ai-engine: Python ML application
   - redis: Caching and queue service
   - Automatic startup and orchestration

TRAINING PROCESS:
================

The ML model trains automatically when first started:

1. SYNTHETIC DATA GENERATION
   - Creates 10,000 flight samples
   - 80% normal flights, 20% with anomalies
   - Simulates realistic flight parameters
   - Includes failure modes: battery drops, motor failures, GPS issues

2. FEATURE ENGINEERING
   - 12 key parameters: altitude, battery_voltage, motor_1_rpm, 
     motor_2_rpm, motor_3_rpm, motor_4_rpm, gps_hdop, vibration_x,
     vibration_y, vibration_z, speed, temperature
   - StandardScaler for normalization
   - Missing value handling

3. MODEL TRAINING
   - XGBoost classifier (100 estimators, max_depth=6)
   - Trains on scaled features
   - Saves model to data/models/xgboost_model.pkl
   - Saves scaler to data/models/scaler.pkl

4. ANOMALY DETECTION
   - Predicts probability of anomaly for each data point
   - Calculates overall risk score (mean probability)
   - Identifies specific anomalies above threshold (0.7)
   - Generates human-readable descriptions

HOW TO USE RIGHT NOW:
====================

1. START THE SYSTEM
   cd dbx_ai
   docker-compose up -d

2. CHECK STATUS
   curl http://localhost:8000/health

3. VIEW API DOCS
   Open browser: http://localhost:8000/docs

4. ANALYZE A FLIGHT LOG
   curl -X POST -F "file=@test_flight.csv" http://localhost:8000/api/v1/analyze

5. GET MODEL INFO
   curl http://localhost:8000/api/v1/model/info

WHAT THE ANALYSIS RETURNS:
=========================

{
  "risk_score": 0.0005,           // Risk level (0-1)
  "risk_level": "LOW",            // LOW/MEDIUM/HIGH
  "anomalies": [],                // Specific issues found
  "shap_explanation": {           // AI interpretability
    "top_features": [             // Most important factors
      {
        "feature": "gps_hdop",
        "importance": 7.13,
        "impact": "positive"
      }
    ]
  },
  "ai_report": {                  // Comprehensive analysis
    "flight_statistics": {        // Flight summary
      "flight_duration": "19 seconds",
      "max_altitude": "290.0 m",
      "battery_consumption": "1.40 V"
    },
    "recommendations": [           // Action items
      "Continue normal flight operations",
      "Regular maintenance schedule recommended"
    ]
  }
}

SUPPORTED FILE FORMATS:
======================
- CSV files (comma-separated flight data)
- MAVLink binary logs (.bin, .log) - ArduPilot
- ULog files - PX4 flight stack

REQUIRED CSV COLUMNS:
====================
timestamp, altitude, battery_voltage, motor_1_rpm, motor_2_rpm, 
motor_3_rpm, motor_4_rpm, gps_hdop, vibration_x, vibration_y, 
vibration_z, speed, temperature

ANOMALY TYPES DETECTED:
======================
- Critical battery voltage (< 10V)
- Extreme altitude (< 0m or > 400m)
- Motor failure (RPM < 1000)
- Poor GPS signal (HDOP > 5)
- High vibration levels (> 8 units)
- Temperature extremes (< 5°C or > 40°C)

SYSTEM ARCHITECTURE:
===================

┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Flight Logs   │───▶│   Log Parser    │───▶│  ML Anomaly     │
│  (CSV/BIN/ULOG) │    │                 │    │   Detector      │
└─────────────────┘    └─────────────────┘    └─────────────────┘
                                                        │
┌─────────────────┐    ┌─────────────────┐             ▼
│   AI Report     │◀───│ SHAP Explainer  │    ┌─────────────────┐
│   Generator     │    │                 │◀───│  Risk Scoring   │
└─────────────────┘    └─────────────────┘    └─────────────────┘
        │
        ▼
┌─────────────────┐    ┌─────────────────┐
│   FastAPI       │───▶│     Redis       │
│   REST API      │    │    Cache        │
└─────────────────┘    └─────────────────┘

TROUBLESHOOTING:
===============

PROBLEM: Docker not starting
SOLUTION: Start Docker Desktop manually

PROBLEM: API returns 500 error
SOLUTION: Check logs with: docker-compose logs ai-engine

PROBLEM: File upload fails
SOLUTION: Ensure CSV has required columns, check file format

PROBLEM: Low accuracy
SOLUTION: System uses synthetic training data initially, 
         retrain with real flight logs for better accuracy

COMMANDS CHEAT SHEET:
====================

# Start system
docker-compose up -d

# Stop system  
docker-compose down

# Rebuild after code changes
docker-compose up --build -d

# View logs
docker-compose logs ai-engine

# Check running containers
docker-compose ps

# Test health
curl http://localhost:8000/health

# Analyze file
curl -X POST -F "file=@flight.csv" http://localhost:8000/api/v1/analyze

# Get model info
curl http://localhost:8000/api/v1/model/info

NEXT STEPS:
==========
1. Add your OpenAI API key to .env for AI-generated reports
2. Upload real flight logs for analysis
3. Retrain model with your specific drone data
4. Integrate with your existing flight management system
5. Set up monitoring and alerting for high-risk flights

The system is now fully operational and ready to analyze drone flight logs!